// <auto-generated />
using AwesomeColours.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AwesomeColours.Repository.Migrations
{
    [DbContext(typeof(ColoursDBContext))]
    partial class ColoursDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AwesomeColours.DataAccess.Entities.Colour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = true,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = true,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 3,
                            IsEnabled = true,
                            Name = "Blue"
                        });
                });

            modelBuilder.Entity("AwesomeColours.DataAccess.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAuthorised")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Willis",
                            IsAuthorised = false,
                            IsEnabled = false,
                            IsValid = true,
                            LastName = "Tibbs"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Sharon",
                            IsAuthorised = false,
                            IsEnabled = false,
                            IsValid = false,
                            LastName = "Halt"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Patrick",
                            IsAuthorised = false,
                            IsEnabled = true,
                            IsValid = true,
                            LastName = "Kerr"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Lilly",
                            IsAuthorised = false,
                            IsEnabled = false,
                            IsValid = false,
                            LastName = "Hale"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Joel",
                            IsAuthorised = false,
                            IsEnabled = true,
                            IsValid = true,
                            LastName = "Daly"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Imogen",
                            IsAuthorised = false,
                            IsEnabled = true,
                            IsValid = false,
                            LastName = "Kent"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "George",
                            IsAuthorised = false,
                            IsEnabled = true,
                            IsValid = true,
                            LastName = "Edwards"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Gabriel",
                            IsAuthorised = false,
                            IsEnabled = false,
                            IsValid = false,
                            LastName = "Franics"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "Courtney",
                            IsAuthorised = false,
                            IsEnabled = true,
                            IsValid = true,
                            LastName = "Arnold"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Brian",
                            IsAuthorised = false,
                            IsEnabled = true,
                            IsValid = true,
                            LastName = "Allen"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Bo",
                            IsAuthorised = true,
                            IsEnabled = true,
                            IsValid = true,
                            LastName = "Bob"
                        });
                });

            modelBuilder.Entity("AwesomeColours.DataAccess.Entities.PersonColour", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ColourId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "ColourId");

                    b.HasIndex("ColourId");

                    b.ToTable("PersonColours");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            ColourId = 1,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 1,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 1,
                            ColourId = 3,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 2,
                            ColourId = 1,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 2,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 2,
                            ColourId = 3,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 3,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 4,
                            ColourId = 1,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 4,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 4,
                            ColourId = 3,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 5,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 6,
                            ColourId = 1,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 7,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 7,
                            ColourId = 3,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 8,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 9,
                            ColourId = 1,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 10,
                            ColourId = 1,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 10,
                            ColourId = 2,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 10,
                            ColourId = 3,
                            Id = 0
                        },
                        new
                        {
                            PersonId = 11,
                            ColourId = 1,
                            Id = 0
                        });
                });

            modelBuilder.Entity("AwesomeColours.DataAccess.Entities.PersonColour", b =>
                {
                    b.HasOne("AwesomeColours.DataAccess.Entities.Colour", "Colour")
                        .WithMany("PersonColours")
                        .HasForeignKey("ColourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeColours.DataAccess.Entities.Person", "Person")
                        .WithMany("PersonColours")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
